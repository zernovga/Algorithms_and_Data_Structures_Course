
    1. 

    2. по моему мы решали эти пекрвые два пункта на паре.

    3. O(n) - первый цикл O(n), а второй цикл O(1), он выполняется только 1 раз из-за break.

    4. O(n * log n) - главный цикл O(n/2), вложенный имеет сложность O(log n),а послендующитй цикл имеет сложность O(log n).

    5. O(n2 * log n) - главный цикл O(n/2), упростив логическое выражение в послед.

	цикле можно понять, что они одинаковые, а последний цикл обладает сложностью O(log n) поскольку итератор увеличивается вдвое на каждой итерации пока не достигнет n.

    6. O(корень из n) – путем перебора значений переменной n и исключения (не знаю как это иначе объяснить, только перебирать значения n и приводить примеры).

    7. 

    8. O(корень из n) – смотреть пункт 6.

    9. O(n) – единственный цикл в функции выполняется n раз, а остальные части кода имеют константную сложность.

    10. в лучшем случае цикл не выполниться ни разу, а в худшем случае может быть вплоть до бесконечности итераций.

    11. O(корень из n) — так как программа будет выполняться до тех пор пока i^2 меньше n.

    12. O(log n).

    13. O(n2).

    14. O(n2) - главный цикл сделает n итераций, а вложенный n/i итераций.

    15. O(n2) - главный цикл имеет сложность n/3, а вложенный имеет сложность n/4, после отбрасывания констант получаем ответ.

    16. O(log n) - главный и вложенный цикл имеют сложность логарифм по основанию 2 от n, 
	поскольку циклы вложенные мы перемножаем их сложность и получаем O(log^2 n), а после отбрасываем степень.

    17. O(log n) – потому что j будет увеличиваться в 2 раза при каждой итерации, пока она не превысит n.

    18. O(N + M) -  так как первый цикл имеет сложность O(N), а второй имеет сложность O(M), мы просто складываем их сложность и получаем ответ.

    19. 

    20. O(n * log n) - так как главный цикл имеет сложность O(n/2), а вложенный в него O(log n) мы их перемножаем.

    21. log(n) – при переборе значений N, можно выявить закономерность- если если значение N увеличивается в 2 раза, то количество итераций цикла увеличится на 1. 

    22. O(n) –  цикл выполняется n раз, несмотря на умножение итератора на k.

    23. 